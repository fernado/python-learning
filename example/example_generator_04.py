"""
生成器：
    生成器的本质是迭代器

    创建生成器的两种方案：
        1. 生成器函数
        2. 生成器表达式

    生成器函数
        生成器函数中有一个关键字yield
        生蹭墙函数执行的时候，并不会执行函数，得到的是生成器

        yield: 只要函数中出现了yield，它就是一个生成器函数
            作用：
                1. 可以返回数据
                2. 可以分段的执行函数中的内容，通过__next__()可以执行到下一个yield
        优势：
            用好了，特别的节省内存



推导式：
    简化代码
    语法：
        列表推导式： [数据 for 循环 if 判断]
        集合推导式： {数据 for 循环 if 判断}
        字典推导式： {k:v for 循环 if 判断}

    不要把推导式妖魔化
    元组没有推导式
    (数据 for 循环 if 判断) ====> 这种不叫元组推导式，其叫做生成器表达式


    生成器表达式 -> 一次性的
        语法: (数据 for循环 if)
"""

gen = (i**2 for i in range(10))
print(gen)

lst = list(gen)
print(lst)

print('-----------------------')

gen = (i**2 for i in range(10))
for item in gen:
    print(item)

lst = list(gen)
# 一次性，此处为[]
print(lst)

print('-----------------------')

s = list("周杰伦")
print(s)